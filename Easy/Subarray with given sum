Given an unsorted array of non-negative integers, find a continuous sub-array which adds to a given number.

Input:

The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case consists of two lines. The first line of each test case is N and S, where N is the size of array and S is the sum. The second line of each test case contains N space separated integers denoting the array elements.

Output:

Corresponding to each test case, in a new line, print the starting and ending positions of first such occuring subarray if sum equals to subarray, else print -1.

Note: Position of 1st element of the array should be considered as 1.

Expected Time Complexity: O(n)

Constraints:
1 ≤ T ≤ 100
1 ≤ N ≤ 100
1 ≤ an array element ≤ 200

Example:

Input:
2
5 12
1 2 3 7 5
10 15
1 2 3 4 5 6 7 8 9 10

Output:
2 4
1 5


#include <iostream>
using namespace std;

int main() {
	int T;
	cin>>T;
	for(int i=0;i<T;i++){
	    int N,S;
	    cin>>N>>S;
	    int a[N];
	    for(int j=0;j<N;j++){
	        cin>>a[j];
	    }
	    for(int j=0;j<N;j++){
	        int sum=0;
	        for(int x=j;x<N;x++){
	            sum += a[x];
	            if(sum==S){
	                cout<<j+1<<" "<<x+1<<endl;
	                goto stop;
	            }
	        }
	    }
	    cout<<-1<<endl;
	    stop:;
	}
	return 0;
}
