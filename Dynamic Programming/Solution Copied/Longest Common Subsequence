Given two sequences, find the length of longest subsequence present in both of them. Both the strings are of uppercase.

Input:
First line of the input contains no of test cases  T,the T test cases follow.
Each test case consist of 2 space separated integers A and B denoting the size of string str1 and str2 respectively
The next two lines contains the 2 string str1 and str2 .


Output:
For each test case print the length of longest  common subsequence of the two strings .


Constraints:
1<=T<=30
1<=size(str1),size(str2)<=100


Example:
Input:
2
6 6
ABCDGH
AEDFHR
3 2
ABC
AC

Output:
3
2

#include <iostream>
using namespace std;

int lcs(string x, string y, int m, int n){
    int L[m+1][n+1];
    for(int i=0;i<=m;i++){
        for(int j=0;j<=n;j++){
            if(i==0 || j==0){
                L[i][j] = 0;
            }
            else if(x[i-1] == y[j-1]){
                L[i][j] = 1 + L[i-1][j-1];
            }
            else{
                L[i][j] = max(L[i][j-1],L[i-1][j]);
            }
        }
    }
    return L[m][n];
}

int main() {
	int T;
	cin>>T;
	for(int i=0;i<T;i++){
	    int m,n;
	    cin>>m>>n;
	    string x,y;
	    cin>>x>>y;
	    cout<<lcs(x,y,m,n)<<endl;
	}
	return 0;
}
